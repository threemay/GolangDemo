// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package nftprocess

import (
	"context"
	"github.com/google/wire"
	"internal/app/asset/grpc"
	grpc3 "internal/app/ledger/grpc"
	grpc2 "internal/app/payment/grpc"
	"app/token/database"
	"internal/pkg/databaseutil"
	"internal/pkg/service"
	"internal/pkg/service/objectstore"
)

// Injectors from wire.go:

func Initialize(ctx context.Context) (Workflow, error) {
	config, err := service.ProvideAWSConfig(ctx)
	if err != nil {
		return Workflow{}, err
	}
	client := service.ProvideSSMClient(config)
	assetClient, err := grpc.ProvideAssetClient(ctx, client)
	if err != nil {
		return Workflow{}, err
	}
	orderCheckWorkflowStep := ProvideOrderStep(assetClient)
	paymentClient, err := grpc2.ProvidePaymentClient(ctx, client)
	if err != nil {
		return Workflow{}, err
	}
	ledgerClient, err := grpc3.ProvideLedgerClient(ctx, client)
	if err != nil {
		return Workflow{}, err
	}
	paymentCheckWorkflowStep := ProvidePaymentStep(paymentClient, ledgerClient)
	postgresConfig, err := service.ProvidePostgresConfig(ctx, client)
	if err != nil {
		return Workflow{}, err
	}
	db, err := service.ProvideGormDB(postgresConfig)
	if err != nil {
		return Workflow{}, err
	}
	transactionProvider := databaseutil.NewTransactionProvider(db)
	tokenRepository := database.NewTokenRepository()
	s3Client := service.ProvideS3Client(config)
	objectStore := objectstore.ProvideObjectStore(ctx, s3Client, client)
	artworkWorkflowStep := ProvideArtworkStep(transactionProvider, tokenRepository, objectStore, assetClient, ledgerClient, client)
	secretsmanagerClient := service.ProvideSRMClient(config)
	onChainTxRepository := database.NewOnChainTxRepository()
	mintNFTWorkflowStep := ProvideMintNftStep(transactionProvider, secretsmanagerClient, tokenRepository, onChainTxRepository, assetClient, client)
	withdrawNFTWorkflowStep := ProvideWithdrawNftStep(transactionProvider, secretsmanagerClient, tokenRepository, onChainTxRepository, assetClient, client)
	platformCheckWorkflowStep := ProvideIssuanceStep(paymentClient, assetClient, ledgerClient)
	finalizeStep := ProvideFinalizeStep(assetClient, client)
	exchangeWorkflowStep := ProvideExchangeStep(assetClient, ledgerClient, paymentClient)
	workflow := ProvideWorkflow(orderCheckWorkflowStep, paymentCheckWorkflowStep, artworkWorkflowStep, mintNFTWorkflowStep, withdrawNFTWorkflowStep, platformCheckWorkflowStep, finalizeStep, exchangeWorkflowStep)
	return workflow, nil
}

// wire.go:

var WireSet = wire.NewSet(databaseutil.NewTransactionProvider, database.NewTokenRepository, database.NewOnChainTxRepository, service.ProvideGormDB, service.ProvidePostgresConfig, service.AWSWireSet, objectstore.ProvideObjectStore, grpc2.ProvidePaymentClient, grpc.ProvideAssetClient, grpc3.ProvideLedgerClient, ProvideWorkflow,
	ProvideExchangeStep,
	ProvideMintNftStep,
	ProvideWithdrawNftStep,
	ProvideOrderStep,
	ProvidePaymentStep,
	ProvideArtworkStep,
	ProvideIssuanceStep,
	ProvideFinalizeStep,
)
